/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TravelService } from "../travel.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TravelCreateInput } from "./TravelCreateInput";
import { Travel } from "./Travel";
import { TravelFindManyArgs } from "./TravelFindManyArgs";
import { TravelWhereUniqueInput } from "./TravelWhereUniqueInput";
import { TravelUpdateInput } from "./TravelUpdateInput";
import { ActivityFindManyArgs } from "../../activity/base/ActivityFindManyArgs";
import { Activity } from "../../activity/base/Activity";
import { ActivityWhereUniqueInput } from "../../activity/base/ActivityWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TravelControllerBase {
  constructor(
    protected readonly service: TravelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Travel })
  @nestAccessControl.UseRoles({
    resource: "Travel",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTravel(@common.Body() data: TravelCreateInput): Promise<Travel> {
    return await this.service.createTravel({
      data: {
        ...data,

        createdby: {
          connect: data.createdby,
        },
      },
      select: {
        createdAt: true,

        createdby: {
          select: {
            id: true,
          },
        },

        endpoint: true,
        id: true,
        name: true,
        startpoint: true,
        tags: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Travel] })
  @ApiNestedQuery(TravelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Travel",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async travels(@common.Req() request: Request): Promise<Travel[]> {
    const args = plainToClass(TravelFindManyArgs, request.query);
    return this.service.travels({
      ...args,
      select: {
        createdAt: true,

        createdby: {
          select: {
            id: true,
          },
        },

        endpoint: true,
        id: true,
        name: true,
        startpoint: true,
        tags: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Travel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Travel",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async travel(
    @common.Param() params: TravelWhereUniqueInput
  ): Promise<Travel | null> {
    const result = await this.service.travel({
      where: params,
      select: {
        createdAt: true,

        createdby: {
          select: {
            id: true,
          },
        },

        endpoint: true,
        id: true,
        name: true,
        startpoint: true,
        tags: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Travel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Travel",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTravel(
    @common.Param() params: TravelWhereUniqueInput,
    @common.Body() data: TravelUpdateInput
  ): Promise<Travel | null> {
    try {
      return await this.service.updateTravel({
        where: params,
        data: {
          ...data,

          createdby: {
            connect: data.createdby,
          },
        },
        select: {
          createdAt: true,

          createdby: {
            select: {
              id: true,
            },
          },

          endpoint: true,
          id: true,
          name: true,
          startpoint: true,
          tags: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Travel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Travel",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTravel(
    @common.Param() params: TravelWhereUniqueInput
  ): Promise<Travel | null> {
    try {
      return await this.service.deleteTravel({
        where: params,
        select: {
          createdAt: true,

          createdby: {
            select: {
              id: true,
            },
          },

          endpoint: true,
          id: true,
          name: true,
          startpoint: true,
          tags: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/activity")
  @ApiNestedQuery(ActivityFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Activity",
    action: "read",
    possession: "any",
  })
  async findActivity(
    @common.Req() request: Request,
    @common.Param() params: TravelWhereUniqueInput
  ): Promise<Activity[]> {
    const query = plainToClass(ActivityFindManyArgs, request.query);
    const results = await this.service.findActivity(params.id, {
      ...query,
      select: {
        accommodation: true,
        afternoonDescription: true,
        afternoonPoint: true,
        createdAt: true,
        eveningDescription: true,
        eveningPoint: true,
        id: true,
        morningDescription: true,
        price: true,
        startpoint: true,

        travel: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/activity")
  @nestAccessControl.UseRoles({
    resource: "Travel",
    action: "update",
    possession: "any",
  })
  async connectActivity(
    @common.Param() params: TravelWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activity: {
        connect: body,
      },
    };
    await this.service.updateTravel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/activity")
  @nestAccessControl.UseRoles({
    resource: "Travel",
    action: "update",
    possession: "any",
  })
  async updateActivity(
    @common.Param() params: TravelWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activity: {
        set: body,
      },
    };
    await this.service.updateTravel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/activity")
  @nestAccessControl.UseRoles({
    resource: "Travel",
    action: "update",
    possession: "any",
  })
  async disconnectActivity(
    @common.Param() params: TravelWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activity: {
        disconnect: body,
      },
    };
    await this.service.updateTravel({
      where: params,
      data,
      select: { id: true },
    });
  }
}
