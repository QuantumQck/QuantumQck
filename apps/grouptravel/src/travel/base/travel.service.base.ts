/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Travel as PrismaTravel,
  Activity as PrismaActivity,
  User as PrismaUser,
} from "@prisma/client";

export class TravelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TravelCountArgs, "select">): Promise<number> {
    return this.prisma.travel.count(args);
  }

  async travels<T extends Prisma.TravelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TravelFindManyArgs>
  ): Promise<PrismaTravel[]> {
    return this.prisma.travel.findMany<Prisma.TravelFindManyArgs>(args);
  }
  async travel<T extends Prisma.TravelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TravelFindUniqueArgs>
  ): Promise<PrismaTravel | null> {
    return this.prisma.travel.findUnique(args);
  }
  async createTravel<T extends Prisma.TravelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TravelCreateArgs>
  ): Promise<PrismaTravel> {
    return this.prisma.travel.create<T>(args);
  }
  async updateTravel<T extends Prisma.TravelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TravelUpdateArgs>
  ): Promise<PrismaTravel> {
    return this.prisma.travel.update<T>(args);
  }
  async deleteTravel<T extends Prisma.TravelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TravelDeleteArgs>
  ): Promise<PrismaTravel> {
    return this.prisma.travel.delete(args);
  }

  async findActivity(
    parentId: string,
    args: Prisma.ActivityFindManyArgs
  ): Promise<PrismaActivity[]> {
    return this.prisma.travel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .activity(args);
  }

  async getCreatedby(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.travel
      .findUnique({
        where: { id: parentId },
      })
      .createdby();
  }
}
