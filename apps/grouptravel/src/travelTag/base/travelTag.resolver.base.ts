/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TravelTag } from "./TravelTag";
import { TravelTagCountArgs } from "./TravelTagCountArgs";
import { TravelTagFindManyArgs } from "./TravelTagFindManyArgs";
import { TravelTagFindUniqueArgs } from "./TravelTagFindUniqueArgs";
import { CreateTravelTagArgs } from "./CreateTravelTagArgs";
import { UpdateTravelTagArgs } from "./UpdateTravelTagArgs";
import { DeleteTravelTagArgs } from "./DeleteTravelTagArgs";
import { TravelTagService } from "../travelTag.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TravelTag)
export class TravelTagResolverBase {
  constructor(
    protected readonly service: TravelTagService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TravelTag",
    action: "read",
    possession: "any",
  })
  async _travelTagsMeta(
    @graphql.Args() args: TravelTagCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TravelTag])
  @nestAccessControl.UseRoles({
    resource: "TravelTag",
    action: "read",
    possession: "any",
  })
  async travelTags(
    @graphql.Args() args: TravelTagFindManyArgs
  ): Promise<TravelTag[]> {
    return this.service.travelTags(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TravelTag, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TravelTag",
    action: "read",
    possession: "own",
  })
  async travelTag(
    @graphql.Args() args: TravelTagFindUniqueArgs
  ): Promise<TravelTag | null> {
    const result = await this.service.travelTag(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TravelTag)
  @nestAccessControl.UseRoles({
    resource: "TravelTag",
    action: "create",
    possession: "any",
  })
  async createTravelTag(
    @graphql.Args() args: CreateTravelTagArgs
  ): Promise<TravelTag> {
    return await this.service.createTravelTag({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TravelTag)
  @nestAccessControl.UseRoles({
    resource: "TravelTag",
    action: "update",
    possession: "any",
  })
  async updateTravelTag(
    @graphql.Args() args: UpdateTravelTagArgs
  ): Promise<TravelTag | null> {
    try {
      return await this.service.updateTravelTag({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TravelTag)
  @nestAccessControl.UseRoles({
    resource: "TravelTag",
    action: "delete",
    possession: "any",
  })
  async deleteTravelTag(
    @graphql.Args() args: DeleteTravelTagArgs
  ): Promise<TravelTag | null> {
    try {
      return await this.service.deleteTravelTag(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
